(define (planets id cross)
    (let*
        (
            (gain-a (c "gain-a" id))
            (gain-b (c "gain-b" id))
            (g (* gain-a gain-b))
            (blur-c (c "blur" id))
            (nb-element (+ 1 (c "nb-element" id #:coeff 3)))
            (r-x (c "r-x" id))
            (r-y (c "r-y" id))
            (r-z (c "r-z" id))
            (r-speed (c "r-speed" id  #:coeff 200))
            (diametre-centre (c "diametre-centre" id #:coeff 127))
            (r-l-kaos-x-coeff (c "r-l-kaos-x-coeff" id))
            (r-l-kaos-y-coeff (c "r-l-kaos-y-coeff" id))
            (r-l-kaos-z-coeff (c "r-l-kaos-z-coeff" id))
            (r-l-kaos-x-freq (c "r-l-kaos-x-freq" id))
            (r-l-kaos-y-freq (c "r-l-kaos-y-freq" id))
            (r-l-kaos-z-freq (c "r-l-kaos-z-freq" id))
            (r-l-x (c "r-l-x" id))
            (r-l-y (c "r-l-y" id))
            (r-l-z (c "r-l-z" id))
            (r-l-y-joystick (c "r-l-y-joystick" id))
            (r-l-z-joystick (c "r-l-z-joystick" id))
            (coeff-color (c "coeff-color" id))
            (opacity-c (c "opacity-c" id))
            (scale-x (c "scale-x" id))
            (scale-y (c "scale-y" id))
            (scale-z (c "scale-z" id))
            (scale-z-gh (c "scale-z-gh" id))
            (nb-cube (+ 2 (c "nb-cube" id)))
            (r-e-x (c "r-e-x" id))
            (r-e-y (c "r-e-y" id))
            (r-e-z (c "r-e-z" id))
            (r-e-time (c "r-e-time" id #:coeff 200))
            (nb-element-element (+ 2 (c "nb-element-element" id #:coeff 30)))
            (scale-sphere-gh (c "scale-sphere-gh" id))
            (scale-sphere-a (c "scale-sphere-a" id))
            (color-coeff-sphere (c "color-coeff-sphere" id))
        )
        (letrec
            (
                (increment
                    (lambda (n i s form)
                        (with-state
                            (translate (vmul (vector (cos (* n i)) (sin (* n i)) 0) s))
                            (cond  ((= form 1)
                                    (rotate (vector
                                        (* (+ (* r-l-kaos-x-coeff (gh2 (+ 1 (* 14 r-l-kaos-x-freq)) g)) r-l-x) (* (/ 360 (max 0.00001 (* (asin 1) 4)) (* n i))))
                                        (* (+ (* r-l-kaos-y-coeff (gh2 (+ 1 (* 14 r-l-kaos-y-freq)) g)) r-l-y) (* (/ 360 (max 0.00001 (* (asin 1) 4)) (* n i))))
                                        (* (+ (* r-l-kaos-z-coeff (gh2 (+ 1 (* 14 r-l-kaos-z-freq)) g)) r-l-z) (* (/ 360 (max 0.00001 (* (asin 1) 4)) (* n i))))))
                                    (rotate (vector 0 (* -360 r-l-y-joystick) (* -360 r-l-z-joystick)))
                                    (colour (vmul (vector (gh2 n g) (gh2 i g) (gh2 9 g)) coeff-color))


                                    (opacity (* (max (gh2 1 g) (gh2 2 g) (gh2 3 g)) (* opacity-c 2) 1))


                                    (scale (vmul (vector scale-x scale-y scale-z) 2))
                                    (translate (vector 0 0 (* 0.5 (* scale-z-gh (max (gh2 1 g) (gh2 2 g) (gh2 3 g))))))
                                    (scale (vector 1 1 (+ (* scale-z-gh (max (gh2 1 g) (gh2 2 g) (gh2 3 g))) 1)))
                                    (draw-cube))
                                (else
                                    (rotate (vector
                                        (* r-l-x (* (/ 360 (max 0.00001 (* (asin 1) 4)) (* n i))))
                                        (* r-l-y (* (/ 360 (max 0.00001 (* (asin 1) 4)) (* n i))))
                                        (* r-l-z (* (/ 360 (max 0.00001 (* (asin 1) 4)) (* n i))))))
                                    (rotate (vector 0 (* -360 r-l-y-joystick) (* -360 r-l-z-joystick)))
                                    (element)))
                        )
                        (cond ((<= n 1) 0)
                            (else (increment (- n 1) i s form)))
                    )
                )
                (element
                    (lambda ()
                        (let ((Nb-cube (+ 1 (truncate (* 30 nb-cube)))))
                            (push)
                            (rotate (vmul (vector r-e-x r-e-y r-e-z) (* (time) r-e-time)))
                            (increment Nb-cube (/ (* (asin 1) 4) (max 1 Nb-cube)) nb-element-element 1)
                            (with-state
                                (scale (vmul #(0.1 0.1 0.01) (+ (* (max (gh2 1 g) (gh2 2 g) (gh2 3 g)) (* 10 scale-sphere-gh)) scale-sphere-a)))
                                (colour (vmul (vector (gh2 1 g) (* 0.5 (gh2 3 g)) (* 0.5 (gh2 9 g))) color-coeff-sphere))
                                (draw-sphere))
                            (pop)
                        )
                    )
                )
            )
            (with-state
                (blur blur-c)
                (hint-none)
                (hint-solid)

                (let ((Nb-element (truncate (* 10 nb-element))))
                    (rotate (vmul (vector r-x r-y r-z) (* (time) r-speed)))
                    (increment Nb-element (/ (* (asin 1) 4) (max 1 Nb-element)) diametre-centre 2)
                )
            )
        )
    )
)
