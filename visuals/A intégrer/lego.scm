(define lego-hash (make-hash))
(define lego-hash-num-freq (make-hash))
(define (lego id cross)
    (define (get-freq-num n)
        (hash-ref! lego-hash-num-freq n 0)
    )
    (define (lego-sub n k)
        (hash-for-each lego-hash
            (lambda (j p)
                (hash-set! lego-hash j (+ p (* (delta) (c "speed" id) (gh (/ j 100)))))
                (with-state
;(show "debug")
;(show n)
;(show p)
                    (translate (vector n p 0))
                    (draw-cube)
                )
                (when (> p 10)
                    (hash-remove! lego-hash j)
                )
            )
        )
        (for ((i (build-list k values)))
            (when
                (>= (gh i) (c "offset-gh" id))
                    (hash-set! lego-hash (+ (* i 100) (get-freq-num n)) 0)
                    (hash-set! lego-hash-num-freq n (+ (hash-ref! lego-hash-num-freq n 1) 1))
            )
        )
        (unless (zero? n)
            (lego-sub (- n 1) k)
        )
    )

    (translate (vector -10 -10 0))
    
    (lego-sub 16 16)
)
        