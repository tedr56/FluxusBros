;wasup


(require scheme/math)
(clear)
(define bevel (load-primitive "bevel.obj"))
(with-primitive bevel (hide 1))
(define lpoints 50)
(define lsize 0.1)
(define l1 (build-ribbon lpoints))
(define l2 (build-ribbon lpoints))
(define l3 (build-ribbon lpoints))
(define l4 (build-ribbon lpoints))
(define l5 (build-ribbon lpoints))
(define l6 (build-ribbon lpoints))
(define l7 (build-ribbon lpoints))
(define l8 (build-ribbon lpoints))
(define l9 (build-ribbon lpoints))
(define l10 (build-ribbon lpoints))
(define l11 (build-ribbon lpoints))
(define l12 (build-ribbon lpoints))

(define (init-line prim)
    (with-primitive prim (pdata-map! (lambda (w) lsize) "w"))
    (with-primitive prim (hint-unlit) (colour (vector 0 1 0))))
(init-line l1)
(init-line l2)
(init-line l3)
(init-line l4)
(init-line l5)
(init-line l6)
(init-line l7)
(init-line l8)
(init-line l9)
(init-line l10)
(init-line l11)
(init-line l12)

(define (wasup)
    (define (increment i o f r s c)
;(show i)
        (for ((n (build-list (inexact->exact (floor i)) values)))
            (with-state
                (colour (hsv->rgb (vector (+ c (* (/ (* n o 180) (* pi r)) (mn 0 11 0.2))) 1 1)))
                (translate (vmul (vector (cos (/ (* n o 180) (* pi r))) (sin (/ (* n o 180) (* pi r))) 0) r))
                (rotate (vector 0 0 (* (/ 360 (* 2 pi)) (/ (* n o 180) (* pi r)))))
                (scale s)
                (cond ((zero? (mn 2 43))
                        (draw-cube))
                      (else
                        (scale 0.5)
                        (draw-instance bevel)))
            )
        )
    )
    (define (jauge rayon frequence angle taille coeff-son color lprim1-1 lprim1-2 lprim2-1 lprim2-2)
        (let* ((size-cube (+ 0.001 (mn 0 27 0.1)))
               (angle-size 1)
               (nb-cube (/ (* angle pi rayon) (* size-cube 180)))
               (s 0.5)
               (cube-size (vector (mn 0 29 2) (mn 0 28 2) (mn 0 30 2))))

        (push)
        (let ((Rz   (if (zero? (m 2 51))
                        90
                        270))
              (Rx   (if (zero? (m 2 81))
                        180
                        0)))
        (rotate (vector Rx 0 Rz))

        (increment (max2 (* (gh frequence) coeff-son) nb-cube) size-cube frequence rayon cube-size color)
        (trait lprim1-1 rayon angle (vector Rx 0 Rz) -1 (vector-ref cube-size 0) (vector-ref cube-size 1))
        (trait lprim1-2 rayon angle (vector Rx 0 Rz) 1 (vector-ref cube-size 0) (vector-ref cube-size 1))
        )
        (pop)

        (push)
        (let ((Rz   (if (not (zero? (m 2 61)))
                        90
                        270))
              (Rx   (if (not (zero? (m 2 71)))
                        180
                        0)))
        (rotate (vector Rx 0 Rz))
        (increment (max2 (* (gh frequence) coeff-son) nb-cube) size-cube frequence rayon cube-size color)
        (trait lprim2-1 rayon angle (vector Rx 0 Rz) -1 (vector-ref cube-size 0) (vector-ref cube-size 1))
        (trait lprim2-2 rayon angle (vector Rx 0 Rz) 1 (vector-ref cube-size 0) (vector-ref cube-size 1))
        )
        (pop)
        )
    )
    (define (trait prim Rayon Angle position side sizeX sizeY)
        (with-primitive prim
            (identity)
            (let* ((rayon (+ Rayon (* side (* sizeX 0.5)) (* side 0.1)))
                   (offset- (atan (/ (* sizeY 0.5) rayon)))
                   (offset+ (* 2 (tan (/ (* 0.5 sizeY) rayon))))
                   (angle (+ Angle offset+))
                   (Lpoints (- lpoints 0)))
                (pdata-index-map!
                    (lambda (i p)
                        (vmul (vector (cos (- (/ (* angle i) Lpoints) offset-)) (sin (- (/ (* angle i) Lpoints) offset-)) 0) rayon)
                    )
                    "p"
                )
            )
            (rotate position)
        )
    )

    (gain (* (mn 0 3 50) (mn 0 4)))
    (blur (+ (mn 0 24) 0.01))
    (let ((rayonG (mn 0 12 10))
          (angleG (mn 0 16 pi)))
    (smoothing-bias (mn 0 25 2))
        (jauge (mn 0 13 rayonG) (mn 0 5 16) (mn 0 17 angleG) (mn 0 26 2) (mn 0 2 0.1) (mn 0 10) l1 l2 l3 l4)
        (jauge (mn 0 14 rayonG) (mn 0 6 16) (mn 0 18 angleG) (mn 0 26 2) (mn 0 1 0.1) (mn 0 9) l5 l6 l7 l8)
        (jauge (mn 0 15 rayonG) (mn 0 7 16) (mn 0 19 angleG) (mn 0 26 2) (mn 0 0 0.1) (mn 0 8) l9 l10 l11 l12)
    )
)

(every-frame (wasup))