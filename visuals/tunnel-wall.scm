(define (tunnel-wall id cross)
    (define (tunnel-wall x y g max-size scale-gh ecart)
        (tunnel-line x y g max-size scale-gh ecart)
        (when (> x 1)
            (tunnel-wall (- x 1) y g max-size scale-gh ecart)
        )        
    )
    (define (tunnel-line x y g max-size scale-gh ecart)
        (with-state
            (let
                (
                    (freq (* (get-num-frequency-bins) (flxrnd)))
                )
                (translate (vmul (vector x y 0) 2.5))
                (scale
                    (vadd
;                        (vector (* (* ecart 2) (flxrnd)) (* (* ecart 2) (flxrnd)) (* 1 (flxrnd)))
                        (vector (* 10 (flxrnd)) (* 10 (flxrnd)) (* 1 (flxrnd)))
                        (vector 0 0 (min (* (gl freq g) scale-gh 3) (* 10 max-size)))
                    )
                )
                (hint-none)
                (hint-solid)
                (hint-unlit)
                (hint-wire)
                (opacity (max (min 0.2 (gl freq g)) 0.6))
                (colour (vector (min 0.3 (gl (+ freq 2) g)) (min 0.2 (gl (- freq 2) g)) (min 0.4 (gl freq g))))
                ;(wire-colour (vector (gl freq g) (gl (+ freq 2) g) (gl (- freq 2) g)))
                (wire-colour (hsv->rgb (vector (/ freq (get-num-frequency-bins)) 1 (gl freq g))))
                (line-width (min 2 (gl freq g)))
                (draw-cube)
            )
        )
        
        (when (> y 1)
            (tunnel-line x (- y 1) g max-size scale-gh ecart)
        )
    )
    (define (tunnel-sub n)
        (let*
            (
                (l 4)
                (L 10)
                (x l)
                (y L)
                (e 4)
                (ee (* 1.2 e))

                (r (vector 0 (* (time) 100 (c "rotate-local" id)) 0))
                (R (vector 0 0 (* (time) 100 (c "rotate-global" id))))
                (g (* (c "gain-a" id) (* (c "gain-b" id) 5)))
                (max-size (c "max-size" id))
                (scale-gh (c "scale-gh-coeff" id #:coeff 2))
            )
            (with-state
                (translate (vector 0 0 -10))
                (rotate R)
                (with-state
                    (translate (vector (* -0.5 l) 0 (* -0.75 L)))
                    (rotate (vector 90 0 0))
                    (translate (vector (* -0.75 l) 0 (* 1 l)))
                    (rotate r)
                    (tunnel-wall x y g max-size scale-gh ee)
                )
                (with-state
                    (translate (vector (* -0.5 l) 0 (* -0.75 L)))
                    (rotate (vector 90 180 0))
                    (translate (vector (* 2.5 -0.75 l) 0 (* 1 l)))
                    (rotate r)
                    (tunnel-wall x y g max-size scale-gh e)
                )
                (with-state
                    (translate (vector (* -0.5 l) 0 (* -0.75 L)))
                    (rotate (vector 90 0 0))
                    (translate (vector (* -1 l) 0 (* 2 0.75 l)))
                    (rotate (vector 0 90 0))
                    (rotate r)
                    (tunnel-wall x y g max-size scale-gh e)
                )
                (with-state
                    (translate (vector (* -0.5 l) 0 (* -0.75 L)))
                    (rotate (vector 90 0 0))
                    (translate (vector (* 2 l) 0 (* 2 0.75 l)))
                    (rotate (vector 0 90 0))
                    (rotate r)
                    (tunnel-wall x y g max-size scale-gh e)
                )


            )
        )
    )
    (with-state
        (flxseed 2)
        (tunnel-sub 5)
    )
)

